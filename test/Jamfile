##==============================================================================
#    Copyright (c) 2003-2006 Joel de Guzman
#    Copyright (c) 2013 Mateusz Loskot
#    Copyright (c) 2014-2018 Kohei Takahashi
#
#   Use, modification and distribution is subject to the Boost Software
#   License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
#   http://www.boost.org/LICENSE_1_0.txt)
#==============================================================================
# bring in rules for testing
import testing ;
import os ;
import ../../config/checks/config : requires ;

# import rules from the boost fusion test
import ../util/test :
    test-bfl-run_with_and_without_fallback
    test-bfl-compile_with_and_without_fallback
;

if [ os.environ CI ]
{
    CI_DEFINES = <define>CI_SKIP_KNOWN_FAILURE=1 ;
}

project
    : requirements
        $(CI_DEFINES)
    ;

{
    test-suite fusion :

    [ run algorithm/all.cpp ]
    [ run algorithm/any.cpp ]
    [ run algorithm/clear.cpp ]
    [ run algorithm/copy.cpp ]
    [ run algorithm/count.cpp ]
    [ run algorithm/count_if.cpp ]
    [ run algorithm/erase.cpp ]
    [ run algorithm/erase_key.cpp ]
    [ run algorithm/filter.cpp ]
    [ run algorithm/filter_if.cpp ]
    [ run algorithm/find.cpp ]
    [ run algorithm/find_if.cpp ]
    [ run algorithm/fold.cpp ]
    [ run algorithm/for_each.cpp ]
    [ run algorithm/insert.cpp ]
    [ run algorithm/insert_range.cpp ]
    [ run algorithm/iter_fold.cpp ]
    [ run algorithm/move.cpp : :
        : [ requires cxx11_rvalue_references ] ]
    [ run algorithm/none.cpp ]
    [ run algorithm/pop_back.cpp ]
    [ run algorithm/pop_front.cpp ]
    [ run algorithm/push_back.cpp ]
    [ run algorithm/push_front.cpp ]
    [ run algorithm/remove.cpp ]
    [ run algorithm/remove_if.cpp ]
    [ run algorithm/replace.cpp ]
    [ run algorithm/replace_if.cpp ]
    [ run algorithm/reverse_fold.cpp ]
    [ run algorithm/reverse_iter_fold.cpp ]
    [ run algorithm/reverse.cpp ]
    [ run algorithm/segmented_for_each.cpp ]
    [ run algorithm/segmented_find.cpp ]
    [ run algorithm/segmented_find_if.cpp ]
    [ run algorithm/segmented_fold.cpp ]
    [ run algorithm/transform.cpp ]
    [ run algorithm/join.cpp ]
    [ run algorithm/zip.cpp ]
    [ run algorithm/zip2.cpp ]
    [ run algorithm/zip_ignore.cpp ]
    [ run algorithm/flatten.cpp ]
    [ compile algorithm/ticket-5490.cpp ]

    [ compile include/adapted.cpp ]
    [ compile include/_boost_pfr.cpp
        : <define>BOOST_PFR_ENABLE_IMPLICIT_REFLECTION=1 [ requires cxx14_constexpr ] ]
    [ compile include/_boost_pfr_explicit.cpp
        : [ requires cxx14_constexpr ] ]

    [ test-bfl-run_with_and_without_fallback sequence/as_deque.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/as_list.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/as_map.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/as_map_assoc.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/as_set.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/as_vector.cpp ]
    [ run sequence/boost_pfr.cpp : :
        : <define>BOOST_PFR_ENABLE_IMPLICIT_REFLECTION=1 [ requires cxx14_constexpr ] ]
    [ run sequence/boost_pfr_empty.cpp : :
        : <define>BOOST_PFR_ENABLE_IMPLICIT_REFLECTION=1 [ requires cxx14_constexpr ] ]
    [ run sequence/boost_pfr_convert.cpp : :
        : <define>BOOST_PFR_ENABLE_IMPLICIT_REFLECTION=1 [ requires cxx14_constexpr ] ]
    [ run sequence/boost_pfr_iterator.cpp : :
        : [ requires cxx14_constexpr ] ]
    [ run sequence/boost_pfr_force_macro.cpp : :
        : [ requires cxx14_constexpr ] ]
    [ run sequence/boost_pfr_explicit.cpp : :
        : [ requires cxx14_constexpr ] ]
    [ test-bfl-run_with_and_without_fallback sequence/boost_tuple.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/boost_tuple_iterator.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/cons.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/convert_boost_tuple.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/convert_deque.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/convert_list.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/convert_std_pair.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/convert_std_tuple.cpp : :
        : [ requires cxx11_variadic_templates cxx11_hdr_tuple ] ]
    [ test-bfl-run_with_and_without_fallback sequence/convert_vector.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/filter_view.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/hash.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/io.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/iterator_range.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/joint_view.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/list_comparison.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/list_construction.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/list_copy.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/list_iterator.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/list_hash.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/list_make.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/list_misc.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/list_mutate.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/list_nest.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/list_tie.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/list_value_at.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/deque_comparison.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/deque_construction.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/deque_copy.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/deque_iterator.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/deque_hash.cpp ]
    [ test-bfl-compile_with_and_without_fallback sequence/deque_is_constructible.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/deque_make.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/deque_misc.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/deque_move.cpp : :
        : [ requires cxx11_rvalue_references ] ]
    [ test-bfl-run_with_and_without_fallback sequence/deque_mutate.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/deque_nest.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/deque_tie.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/deque_value_at.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/front_extended_deque.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/back_extended_deque.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/make_list.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/make_vector.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/map.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/map_comparison.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/map_construction.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/map_copy.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/map_misc.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/map_move.cpp : :
        : [ requires cxx11_rvalue_references ] ]
    [ test-bfl-run_with_and_without_fallback sequence/map_mutate.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/map_tie.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/nil.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/nview.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/reverse_view.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/segmented_iterator_range.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/set.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/single_view.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/std_pair.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/boost_array.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/array.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/std_array.cpp : :
        : [ requires cxx11_hdr_array ] ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_comparison.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_construction.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_conversion.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_copy.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_element.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_make.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_misc.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_mutate.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_nest.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_hash.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_tie.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_traits.cpp : :
        :
        : tuple_traits__maybe_variadic ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_traits.cpp : :
        : <define>BOOST_FUSION_DISABLE_VARIADIC_VECTOR
        : tuple_traits__no_variadic ]
    [ test-bfl-run_with_and_without_fallback sequence/transform_view.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/identity_view.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_comparison.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_construction.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_conversion.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_copy.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_iterator.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_make.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_misc.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_move.cpp : :
        : [ requires cxx11_rvalue_references ] ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_mutate.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_n.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_nest.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_hash.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_tie.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_traits.cpp : :
        :
        : vector_traits__maybe_variadic ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_traits.cpp : :
        : <define>BOOST_FUSION_DISABLE_VARIADIC_VECTOR
        : vector_traits__no_variadic ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_value_at.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/zip_view.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/zip_view2.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/zip_view_ignore.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/repetitive_view.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/deduce_sequence.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_adt_named.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_adt_named_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_adt.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_adt_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_assoc_adt_named.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_assoc_adt_named_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_assoc_adt.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_assoc_adt_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_assoc_struct_named.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_assoc_struct_named_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_assoc_struct.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_assoc_struct_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_assoc_tpl_adt.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_assoc_tpl_adt_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_assoc_tpl_struct.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_assoc_tpl_struct_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_struct_named.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_struct_named_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_struct.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_struct_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_tpl_adt.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_tpl_adt_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_tpl_struct.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_tpl_struct_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adt_attribute_proxy.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_struct.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_struct_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_struct_move.cpp : :
        : [ requires cxx11_rvalue_references ] ]
    [ test-bfl-run_with_and_without_fallback sequence/define_struct_inline.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_struct_inline_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_struct_inline_move.cpp : :
        : [ requires cxx11_rvalue_references ] ]
    [ test-bfl-run_with_and_without_fallback sequence/define_assoc_struct.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_assoc_struct_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_assoc_struct_move.cpp : :
        : [ requires cxx11_rvalue_references ] ]
    [ test-bfl-run_with_and_without_fallback sequence/define_tpl_struct.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_tpl_struct_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_tpl_struct_move.cpp : :
        : [ requires cxx11_rvalue_references ] ]
    [ test-bfl-run_with_and_without_fallback sequence/define_tpl_struct_inline.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_tpl_struct_inline_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_tpl_struct_inline_move.cpp : :
        : [ requires cxx11_rvalue_references ] ]
    [ test-bfl-run_with_and_without_fallback sequence/define_assoc_tpl_struct.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_assoc_tpl_struct_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_assoc_tpl_struct_move.cpp : :
        : [ requires cxx11_rvalue_references ] ]
    [ test-bfl-run_with_and_without_fallback sequence/std_tuple.cpp : :
        : [ requires cxx11_variadic_templates cxx11_hdr_tuple ] ]
    [ test-bfl-run_with_and_without_fallback sequence/std_tuple_iterator.cpp : :
        : [ requires cxx11_variadic_templates cxx11_hdr_tuple ] ]
    [ test-bfl-run_with_and_without_fallback sequence/ref_vector.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/flatten_view.cpp ]
    [ test-bfl-compile_with_and_without_fallback sequence/github-159.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/github-176.cpp ]

    [ test-bfl-compile_with_and_without_fallback sequence/size.cpp ]

    [ run functional/fused.cpp ]
    [ run functional/fused_function_object.cpp ]
    [ run functional/fused_procedure.cpp ]
    [ run functional/unfused.cpp ]
    [ run functional/unfused_typed.cpp ]
    [ run functional/make_fused.cpp ]
    [ run functional/make_fused_function_object.cpp ]
    [ run functional/make_fused_procedure.cpp ]
    [ run functional/make_unfused.cpp ]
    [ run functional/invoke.cpp ]
    [ run functional/invoke_function_object.cpp ]
    [ run functional/invoke_procedure.cpp ]
    [ run sequence/swap.cpp ]

    [ run support/config.cpp ]
    [ compile support/config_pfr_0.cpp ]
    [ compile support/config_pfr_1.cpp ]
    [ compile support/is_sequence.cpp ]
    [ compile support/is_view.cpp ]
    [ compile support/pair_deque.cpp ]
    [ compile support/pair_list.cpp ]
    [ compile support/pair_map.cpp ]
    [ compile support/pair_set.cpp ]
    [ compile support/pair_vector.cpp ]
    [ compile support/pair_nest.cpp ]
    [ compile support/index_sequence.cpp
        : [ requires cxx11_variadic_templates ] ]
    [ compile support/and.cpp
        : [ requires cxx11_variadic_templates ] ]
    [ compile support/tag_of.cpp ]
    [ compile support/unused.cpp ]
    [ compile support/detail/tag_of_fallback.cpp ]

#   [ compile-fail xxx.cpp  ]

    ;
}
