##==============================================================================
#    Copyright (c) 2003-2006 Joel de Guzman
#    Copyright (c) 2013 Mateusz Loskot
#    Copyright (c) 2014-2018 Kohei Takahashi
#    Copyright (c) 2023 Denis Mikhailov
#
#   Use, modification and distribution is subject to the Boost Software
#   License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
#   http://www.boost.org/LICENSE_1_0.txt)
#==============================================================================
# bring in rules for testing
import testing ;
import os ;
import ../../config/checks/config : requires ;

# import rules from the boost fusion test
import ../util/test :
    test-bfl-run_with_and_without_fallback
    test-bfl-compile_with_and_without_fallback
    test-bfl-compile_strictly_without_fallback
;

if [ os.environ CI ]
{
    CI_DEFINES = <define>CI_SKIP_KNOWN_FAILURE=1 ;
}

########## BEGIN of helpers to detect constexpr ctti_type_index trick support

actions mp_simple_run_action
{
      $(>) > $(<)
}

rule mp-run-simple ( sources + : args * : input-files * : requirements * : target-name )
{
   exe $(target-name)_exe : $(sources) : $(requirements) ;
   explicit $(target-name)_exe ;
   make $(target-name).output : $(target-name)_exe : @mp_simple_run_action ;
   explicit $(target-name).output ;
   alias $(target-name) : $(target-name).output ;
}

mp-run-simple constexpr_ctti_type_index_detection.cpp : : : : compiler_supports_constexpr_ctti_type_index ;
explicit compiler_supports_constexpr_ctti_type_index ;

########## END of helpers to detect constexpr ctti_type_index trick support

local REQUIRE_CONSTEXPR_CTTI_TYPE_INDEX =
    [ check-target-builds ../test//compiler_supports_constexpr_ctti_type_index : : <build>no ]
  ;

local REQUIRE_CONSTEXPR_CTTI_TYPE_INDEX_FAIL =
    [ check-target-builds ../test//compiler_supports_constexpr_ctti_type_index : <build>no : ]
  ;


rule test-bfl-run_pfr_implicit ( sources + ) {
    local tests ;
    local target-name = $(sources[1]:B) ;
    local VARIANTS = 
        IMPLICIT_0
        IMPLICIT_1
        IMPLICIT_2
      ;
    for local variant in $(VARIANTS)
    {
        tests += [
            run
                $(sources) : :
            :   <define>BOOST_FUSION_USE_PFR_$(variant)=1 <define>BOOST_PFR_ENABLE_IMPLICIT_REFLECTION=1 $(REQUIRE_CONSTEXPR_CTTI_TYPE_INDEX) [ requires cxx14_constexpr ]
            :   $(target-name)__$(variant:L)
        ] ;
        tests += [
            compile-fail
                $(sources)
            :   <define>BOOST_FUSION_USE_PFR_$(variant)=1 <define>BOOST_PFR_ENABLE_IMPLICIT_REFLECTION=1 $(REQUIRE_CONSTEXPR_CTTI_TYPE_INDEX_FAIL) [ requires cxx14_constexpr ]
            :   $(target-name)__$(variant:L)_fail
        ] ;
    }
    return $(tests) ;
}

rule test-bfl-run_pfr_explicit ( sources + ) {
    local tests ;
    local target-name = $(sources[1]:B) ;
    local VARIANTS = 
        EXPLICIT_0
        EXPLICIT_1
        EXPLICIT_2
      ;
    for local variant in $(VARIANTS)
    {
        tests += [
            run
                $(sources) : :
            :   <define>BOOST_FUSION_USE_PFR_$(variant)=1 [ requires cxx14_constexpr ]
            :   $(target-name)__$(variant:L)
        ] ;
    }
    return $(tests) ;
}

rule test-bfl-run_pfr_only_force ( sources + ) {
    local tests ;
    local target-name = $(sources[1]:B) ;
    local VARIANTS = 
        ONLY_FORCE_0
        ONLY_FORCE_1
      ;
    for local variant in $(VARIANTS)
    {
        tests += [
            run
                $(sources) : :
            :   <define>BOOST_FUSION_USE_PFR_$(variant)=1
            :   $(target-name)__$(variant:L)
        ] ;
    }
    return $(tests) ;
}

project
    : requirements
        $(CI_DEFINES)
    ;

{
    test-suite fusion :

    [ test-bfl-run_with_and_without_fallback algorithm/all.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/any.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/clear.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/copy.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/count.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/count_if.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/erase.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/erase_key.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/filter.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/filter_if.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/find.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/find_if.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/fold.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/for_each.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/insert.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/insert_range.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/iter_fold.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/move.cpp : :
        : [ requires cxx11_rvalue_references ] ]
    [ test-bfl-run_with_and_without_fallback algorithm/none.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/pop_back.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/pop_front.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/push_back.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/push_front.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/remove.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/remove_if.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/replace.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/replace_if.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/reverse_fold.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/reverse_iter_fold.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/reverse.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/segmented_for_each.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/segmented_find.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/segmented_find_if.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/segmented_fold.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/transform.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/join.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/zip.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/zip2.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/zip_ignore.cpp ]
    [ test-bfl-run_with_and_without_fallback algorithm/flatten.cpp ]
    [ test-bfl-compile_with_and_without_fallback algorithm/ticket-5490.cpp ]

    [ run sequence/detail/boost_pfr_utils.cpp : :
        : <define>BOOST_FUSION_EXPECT_CTTI_TYPE_INDEX_CONSTEXPR_WHEN_UTILS_TEST=1 <define>BOOST_PFR_ENABLE_IMPLICIT_REFLECTION=1 $(REQUIRE_CONSTEXPR_CTTI_TYPE_INDEX) [ requires cxx14_constexpr ]
        : detail_boost_pfr_utils_expect_constexpr_ctti_type_index
    ]
    [ run sequence/detail/boost_pfr_utils.cpp : :
        : <define>BOOST_FUSION_EXPECT_CTTI_TYPE_INDEX_NONCONSTEXPR_WHEN_UTILS_TEST=1 <define>BOOST_PFR_ENABLE_IMPLICIT_REFLECTION=1 $(REQUIRE_CONSTEXPR_CTTI_TYPE_INDEX_FAIL) [ requires cxx14_constexpr ]
        : detail_boost_pfr_utils_expect_nonconstexpr_ctti_type_index
    ]

    [ test-bfl-run_with_and_without_fallback sequence/as_deque.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/as_list.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/as_map.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/as_map_assoc.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/as_set.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/as_vector.cpp ]
    [ test-bfl-run_pfr_implicit sequence/boost_pfr.cpp ]
    [ test-bfl-run_pfr_implicit sequence/boost_pfr_empty.cpp ]
    [ test-bfl-run_pfr_implicit sequence/boost_pfr_convert.cpp ]
    [ test-bfl-run_pfr_explicit sequence/boost_pfr_iterator.cpp ]
    [ test-bfl-run_pfr_explicit sequence/boost_pfr_force_macro.cpp ]
    [ test-bfl-run_pfr_explicit sequence/boost_pfr_explicit.cpp ]
    [ test-bfl-run_pfr_only_force sequence/boost_pfr_force_macro_only.cpp ]
    # FIXME it should be passed into test-bfl-run_pfr_implicit, but it's impossible due to issue on PFR side
    [ run sequence/boost_pfr_reference.cpp : :
        : [ requires cxx17_structured_bindings ] ]
    [ test-bfl-run_with_and_without_fallback sequence/boost_tuple.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/boost_tuple_iterator.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/cons.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/convert_boost_tuple.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/convert_deque.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/convert_list.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/convert_std_pair.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/convert_std_tuple.cpp : :
        : [ requires cxx11_variadic_templates cxx11_hdr_tuple ] ]
    [ test-bfl-run_with_and_without_fallback sequence/convert_vector.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/filter_view.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/hash.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/io.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/iterator_range.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/joint_view.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/list_comparison.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/list_construction.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/list_copy.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/list_iterator.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/list_hash.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/list_make.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/list_misc.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/list_mutate.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/list_nest.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/list_tie.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/list_value_at.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/deque_comparison.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/deque_construction.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/deque_copy.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/deque_iterator.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/deque_hash.cpp ]
    [ test-bfl-compile_with_and_without_fallback sequence/deque_is_constructible.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/deque_make.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/deque_misc.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/deque_move.cpp : :
        : [ requires cxx11_rvalue_references ] ]
    [ test-bfl-run_with_and_without_fallback sequence/deque_mutate.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/deque_nest.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/deque_tie.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/deque_value_at.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/front_extended_deque.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/back_extended_deque.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/make_list.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/make_vector.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/map.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/map_comparison.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/map_construction.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/map_copy.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/map_misc.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/map_move.cpp : :
        : [ requires cxx11_rvalue_references ] ]
    [ test-bfl-run_with_and_without_fallback sequence/map_mutate.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/map_tie.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/nil.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/nview.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/reverse_view.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/segmented_iterator_range.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/set.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/single_view.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/std_pair.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/boost_array.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/array.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/std_array.cpp : :
        : [ requires cxx11_hdr_array ] ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_comparison.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_construction.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_conversion.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_copy.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_element.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_make.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_misc.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_mutate.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_nest.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_hash.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_tie.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_traits.cpp : :
        :
        : tuple_traits__maybe_variadic ]
    [ test-bfl-run_with_and_without_fallback sequence/tuple_traits.cpp : :
        : <define>BOOST_FUSION_DISABLE_VARIADIC_VECTOR
        : tuple_traits__no_variadic ]
    [ test-bfl-run_with_and_without_fallback sequence/transform_view.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/identity_view.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_comparison.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_construction.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_conversion.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_copy.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_iterator.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_make.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_misc.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_move.cpp : :
        : [ requires cxx11_rvalue_references ] ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_mutate.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_n.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_nest.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_hash.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_tie.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_traits.cpp : :
        :
        : vector_traits__maybe_variadic ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_traits.cpp : :
        : <define>BOOST_FUSION_DISABLE_VARIADIC_VECTOR
        : vector_traits__no_variadic ]
    [ test-bfl-run_with_and_without_fallback sequence/vector_value_at.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/zip_view.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/zip_view2.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/zip_view_ignore.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/repetitive_view.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/deduce_sequence.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_adt_named.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_adt_named_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_adt.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_adt_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_assoc_adt_named.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_assoc_adt_named_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_assoc_adt.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_assoc_adt_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_assoc_struct_named.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_assoc_struct_named_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_assoc_struct.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_assoc_struct_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_assoc_tpl_adt.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_assoc_tpl_adt_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_assoc_tpl_struct.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_assoc_tpl_struct_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_struct_named.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_struct_named_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_struct.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_struct_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_tpl_adt.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_tpl_adt_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_tpl_struct.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adapt_tpl_struct_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/adt_attribute_proxy.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_struct.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_struct_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_struct_move.cpp : :
        : [ requires cxx11_rvalue_references ] ]
    [ test-bfl-run_with_and_without_fallback sequence/define_struct_inline.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_struct_inline_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_struct_inline_move.cpp : :
        : [ requires cxx11_rvalue_references ] ]
    [ test-bfl-run_with_and_without_fallback sequence/define_assoc_struct.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_assoc_struct_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_assoc_struct_move.cpp : :
        : [ requires cxx11_rvalue_references ] ]
    [ test-bfl-run_with_and_without_fallback sequence/define_tpl_struct.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_tpl_struct_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_tpl_struct_move.cpp : :
        : [ requires cxx11_rvalue_references ] ]
    [ test-bfl-run_with_and_without_fallback sequence/define_tpl_struct_inline.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_tpl_struct_inline_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_tpl_struct_inline_move.cpp : :
        : [ requires cxx11_rvalue_references ] ]
    [ test-bfl-run_with_and_without_fallback sequence/define_assoc_tpl_struct.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_assoc_tpl_struct_empty.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/define_assoc_tpl_struct_move.cpp : :
        : [ requires cxx11_rvalue_references ] ]
    [ test-bfl-run_with_and_without_fallback sequence/std_tuple.cpp : :
        : [ requires cxx11_variadic_templates cxx11_hdr_tuple ] ]
    [ test-bfl-run_with_and_without_fallback sequence/std_tuple_iterator.cpp : :
        : [ requires cxx11_variadic_templates cxx11_hdr_tuple ] ]
    [ test-bfl-run_with_and_without_fallback sequence/ref_vector.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/flatten_view.cpp ]
    [ test-bfl-compile_with_and_without_fallback sequence/github-159.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/github-176.cpp ]

    [ test-bfl-compile_with_and_without_fallback sequence/size.cpp ]

    [ test-bfl-run_with_and_without_fallback functional/fused.cpp ]
    [ test-bfl-run_with_and_without_fallback functional/fused_function_object.cpp ]
    [ test-bfl-run_with_and_without_fallback functional/fused_procedure.cpp ]
    [ test-bfl-run_with_and_without_fallback functional/unfused.cpp ]
    [ test-bfl-run_with_and_without_fallback functional/unfused_typed.cpp ]
    [ test-bfl-run_with_and_without_fallback functional/make_fused.cpp ]
    [ test-bfl-run_with_and_without_fallback functional/make_fused_function_object.cpp ]
    [ test-bfl-run_with_and_without_fallback functional/make_fused_procedure.cpp ]
    [ test-bfl-run_with_and_without_fallback functional/make_unfused.cpp ]
    [ test-bfl-run_with_and_without_fallback functional/invoke.cpp ]
    [ test-bfl-run_with_and_without_fallback functional/invoke_function_object.cpp ]
    [ test-bfl-run_with_and_without_fallback functional/invoke_procedure.cpp ]
    [ test-bfl-run_with_and_without_fallback sequence/swap.cpp ]

    [ run support/config.cpp : : : <test-info>always_show_run_output ]
    [ compile support/config_pfr_0.cpp ]
    [ compile support/config_pfr_1.cpp ]
    [ compile-fail support/config_pfr_fail_0.cpp ]
    [ compile-fail support/config_pfr_fail_1.cpp ]
    [ compile-fail support/config_pfr_fail_2.cpp ]
    [ test-bfl-compile_strictly_without_fallback support/is_sequence.cpp ]
    [ test-bfl-compile_strictly_without_fallback support/is_view.cpp ]
    [ test-bfl-compile_with_and_without_fallback support/pair_deque.cpp ]
    [ test-bfl-compile_with_and_without_fallback support/pair_list.cpp ]
    [ test-bfl-compile_with_and_without_fallback support/pair_map.cpp ]
    [ test-bfl-compile_with_and_without_fallback support/pair_set.cpp ]
    [ test-bfl-compile_with_and_without_fallback support/pair_vector.cpp ]
    [ test-bfl-compile_with_and_without_fallback support/pair_nest.cpp ]
    [ test-bfl-compile_with_and_without_fallback support/index_sequence.cpp
        : [ requires cxx11_variadic_templates ] ]
    [ test-bfl-compile_with_and_without_fallback support/and.cpp
        : [ requires cxx11_variadic_templates ] ]
    [ test-bfl-compile_strictly_without_fallback support/tag_of.cpp ]
    [ test-bfl-compile_with_and_without_fallback support/unused.cpp ]
    [ compile support/detail/tag_of_fallback.cpp ]

#   [ compile-fail xxx.cpp  ]

    ;
}
